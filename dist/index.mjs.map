{"version":3,"sources":["../src/parameterize.ts","../src/safe-keys.ts","../src/cleaning.ts"],"sourcesContent":["/**\n * port of Django's `URLify` function: https://github.com/django/django/blob/main/django/contrib/admin/static/admin/js/urlify.js\n * @module\n */\n\n/**\n * Converts the string to a valid parameterized-slug: it transliterates, downcases, remove special chars, and replaces spaces with hyphens\n * @param given\n * @returns\n */\nexport function parameterize(given: string) {\n  // changes, e.g., \"Petty theft\" to \"petty-theft\"\n  let s = downcode(given);\n  s = s.toLowerCase(); // convert to lowercase\n  // if downcode doesn't hit, the char will be stripped here\n  s = s.replace(/[^-\\w\\s]/g, \"\"); // remove unneeded chars\n  s = s.replace(/^\\s+|\\s+$/g, \"\"); // trim leading/trailing spaces\n  s = s.replace(/[-\\s]+/g, \"-\"); // convert spaces to hyphens\n  // if we want to remove trailing hyphens, add:\n  // s.replace(/-+$/g, \"\"); // trim any trailing hyphens\n  return s.substring(0); // trim to first num_chars chars\n}\n\nconst LATIN_MAP = {\n  À: \"A\",\n  Á: \"A\",\n  Â: \"A\",\n  Ã: \"A\",\n  Ä: \"A\",\n  Å: \"A\",\n  Æ: \"AE\",\n  Ç: \"C\",\n  È: \"E\",\n  É: \"E\",\n  Ê: \"E\",\n  Ë: \"E\",\n  Ì: \"I\",\n  Í: \"I\",\n  Î: \"I\",\n  Ï: \"I\",\n  Ð: \"D\",\n  Ñ: \"N\",\n  Ò: \"O\",\n  Ó: \"O\",\n  Ô: \"O\",\n  Õ: \"O\",\n  Ö: \"O\",\n  Ő: \"O\",\n  Ø: \"O\",\n  Ù: \"U\",\n  Ú: \"U\",\n  Û: \"U\",\n  Ü: \"U\",\n  Ű: \"U\",\n  Ý: \"Y\",\n  Þ: \"TH\",\n  Ÿ: \"Y\",\n  ß: \"ss\",\n  à: \"a\",\n  á: \"a\",\n  â: \"a\",\n  ã: \"a\",\n  ä: \"a\",\n  å: \"a\",\n  æ: \"ae\",\n  ç: \"c\",\n  è: \"e\",\n  é: \"e\",\n  ê: \"e\",\n  ë: \"e\",\n  ì: \"i\",\n  í: \"i\",\n  î: \"i\",\n  ï: \"i\",\n  ð: \"d\",\n  ñ: \"n\",\n  ò: \"o\",\n  ó: \"o\",\n  ô: \"o\",\n  õ: \"o\",\n  ö: \"o\",\n  ő: \"o\",\n  ø: \"o\",\n  ù: \"u\",\n  ú: \"u\",\n  û: \"u\",\n  ü: \"u\",\n  ű: \"u\",\n  ý: \"y\",\n  þ: \"th\",\n  ÿ: \"y\",\n} as const;\n\nconst LATIN_SYMBOLS_MAP = {\n  \"©\": \"(c)\",\n} as const;\n\nconst GREEK_MAP = {\n  α: \"a\",\n  β: \"b\",\n  γ: \"g\",\n  δ: \"d\",\n  ε: \"e\",\n  ζ: \"z\",\n  η: \"h\",\n  θ: \"8\",\n  ι: \"i\",\n  κ: \"k\",\n  λ: \"l\",\n  μ: \"m\",\n  ν: \"n\",\n  ξ: \"3\",\n  ο: \"o\",\n  π: \"p\",\n  ρ: \"r\",\n  σ: \"s\",\n  τ: \"t\",\n  υ: \"y\",\n  φ: \"f\",\n  χ: \"x\",\n  ψ: \"ps\",\n  ω: \"w\",\n  ά: \"a\",\n  έ: \"e\",\n  ί: \"i\",\n  ό: \"o\",\n  ύ: \"y\",\n  ή: \"h\",\n  ώ: \"w\",\n  ς: \"s\",\n  ϊ: \"i\",\n  ΰ: \"y\",\n  ϋ: \"y\",\n  ΐ: \"i\",\n  Α: \"A\",\n  Β: \"B\",\n  Γ: \"G\",\n  Δ: \"D\",\n  Ε: \"E\",\n  Ζ: \"Z\",\n  Η: \"H\",\n  Θ: \"8\",\n  Ι: \"I\",\n  Κ: \"K\",\n  Λ: \"L\",\n  Μ: \"M\",\n  Ν: \"N\",\n  Ξ: \"3\",\n  Ο: \"O\",\n  Π: \"P\",\n  Ρ: \"R\",\n  Σ: \"S\",\n  Τ: \"T\",\n  Υ: \"Y\",\n  Φ: \"F\",\n  Χ: \"X\",\n  Ψ: \"PS\",\n  Ω: \"W\",\n  Ά: \"A\",\n  Έ: \"E\",\n  Ί: \"I\",\n  Ό: \"O\",\n  Ύ: \"Y\",\n  Ή: \"H\",\n  Ώ: \"W\",\n  Ϊ: \"I\",\n  Ϋ: \"Y\",\n} as const;\n\nconst TURKISH_MAP = {\n  ş: \"s\",\n  Ş: \"S\",\n  ı: \"i\",\n  İ: \"I\",\n  ç: \"c\",\n  Ç: \"C\",\n  ü: \"u\",\n  Ü: \"U\",\n  ö: \"o\",\n  Ö: \"O\",\n  ğ: \"g\",\n  Ğ: \"G\",\n} as const;\n\nconst ROMANIAN_MAP = {\n  ă: \"a\",\n  î: \"i\",\n  ș: \"s\",\n  ț: \"t\",\n  â: \"a\",\n  Ă: \"A\",\n  Î: \"I\",\n  Ș: \"S\",\n  Ț: \"T\",\n  Â: \"A\",\n} as const;\n\nconst RUSSIAN_MAP = {\n  а: \"a\",\n  б: \"b\",\n  в: \"v\",\n  г: \"g\",\n  д: \"d\",\n  е: \"e\",\n  ё: \"yo\",\n  ж: \"zh\",\n  з: \"z\",\n  и: \"i\",\n  й: \"j\",\n  к: \"k\",\n  л: \"l\",\n  м: \"m\",\n  н: \"n\",\n  о: \"o\",\n  п: \"p\",\n  р: \"r\",\n  с: \"s\",\n  т: \"t\",\n  у: \"u\",\n  ф: \"f\",\n  х: \"h\",\n  ц: \"c\",\n  ч: \"ch\",\n  ш: \"sh\",\n  щ: \"sh\",\n  ъ: \"\",\n  ы: \"y\",\n  ь: \"\",\n  э: \"e\",\n  ю: \"yu\",\n  я: \"ya\",\n  А: \"A\",\n  Б: \"B\",\n  В: \"V\",\n  Г: \"G\",\n  Д: \"D\",\n  Е: \"E\",\n  Ё: \"Yo\",\n  Ж: \"Zh\",\n  З: \"Z\",\n  И: \"I\",\n  Й: \"J\",\n  К: \"K\",\n  Л: \"L\",\n  М: \"M\",\n  Н: \"N\",\n  О: \"O\",\n  П: \"P\",\n  Р: \"R\",\n  С: \"S\",\n  Т: \"T\",\n  У: \"U\",\n  Ф: \"F\",\n  Х: \"H\",\n  Ц: \"C\",\n  Ч: \"Ch\",\n  Ш: \"Sh\",\n  Щ: \"Sh\",\n  Ъ: \"\",\n  Ы: \"Y\",\n  Ь: \"\",\n  Э: \"E\",\n  Ю: \"Yu\",\n  Я: \"Ya\",\n} as const;\n\nconst UKRAINIAN_MAP = {\n  Є: \"Ye\",\n  І: \"I\",\n  Ї: \"Yi\",\n  Ґ: \"G\",\n  є: \"ye\",\n  і: \"i\",\n  ї: \"yi\",\n  ґ: \"g\",\n} as const;\n\nconst CZECH_MAP = {\n  č: \"c\",\n  ď: \"d\",\n  ě: \"e\",\n  ň: \"n\",\n  ř: \"r\",\n  š: \"s\",\n  ť: \"t\",\n  ů: \"u\",\n  ž: \"z\",\n  Č: \"C\",\n  Ď: \"D\",\n  Ě: \"E\",\n  Ň: \"N\",\n  Ř: \"R\",\n  Š: \"S\",\n  Ť: \"T\",\n  Ů: \"U\",\n  Ž: \"Z\",\n} as const;\n\nconst SLOVAK_MAP = {\n  á: \"a\",\n  ä: \"a\",\n  č: \"c\",\n  ď: \"d\",\n  é: \"e\",\n  í: \"i\",\n  ľ: \"l\",\n  ĺ: \"l\",\n  ň: \"n\",\n  ó: \"o\",\n  ô: \"o\",\n  ŕ: \"r\",\n  š: \"s\",\n  ť: \"t\",\n  ú: \"u\",\n  ý: \"y\",\n  ž: \"z\",\n  Á: \"a\",\n  Ä: \"A\",\n  Č: \"C\",\n  Ď: \"D\",\n  É: \"E\",\n  Í: \"I\",\n  Ľ: \"L\",\n  Ĺ: \"L\",\n  Ň: \"N\",\n  Ó: \"O\",\n  Ô: \"O\",\n  Ŕ: \"R\",\n  Š: \"S\",\n  Ť: \"T\",\n  Ú: \"U\",\n  Ý: \"Y\",\n  Ž: \"Z\",\n} as const;\n\nconst POLISH_MAP = {\n  ą: \"a\",\n  ć: \"c\",\n  ę: \"e\",\n  ł: \"l\",\n  ń: \"n\",\n  ó: \"o\",\n  ś: \"s\",\n  ź: \"z\",\n  ż: \"z\",\n  Ą: \"A\",\n  Ć: \"C\",\n  Ę: \"E\",\n  Ł: \"L\",\n  Ń: \"N\",\n  Ó: \"O\",\n  Ś: \"S\",\n  Ź: \"Z\",\n  Ż: \"Z\",\n} as const;\n\nconst LATVIAN_MAP = {\n  ā: \"a\",\n  č: \"c\",\n  ē: \"e\",\n  ģ: \"g\",\n  ī: \"i\",\n  ķ: \"k\",\n  ļ: \"l\",\n  ņ: \"n\",\n  š: \"s\",\n  ū: \"u\",\n  ž: \"z\",\n  Ā: \"A\",\n  Č: \"C\",\n  Ē: \"E\",\n  Ģ: \"G\",\n  Ī: \"I\",\n  Ķ: \"K\",\n  Ļ: \"L\",\n  Ņ: \"N\",\n  Š: \"S\",\n  Ū: \"U\",\n  Ž: \"Z\",\n} as const;\n\nconst ARABIC_MAP = {\n  أ: \"a\",\n  ب: \"b\",\n  ت: \"t\",\n  ث: \"th\",\n  ج: \"g\",\n  ح: \"h\",\n  خ: \"kh\",\n  د: \"d\",\n  ذ: \"th\",\n  ر: \"r\",\n  ز: \"z\",\n  س: \"s\",\n  ش: \"sh\",\n  ص: \"s\",\n  ض: \"d\",\n  ط: \"t\",\n  ظ: \"th\",\n  ع: \"aa\",\n  غ: \"gh\",\n  ف: \"f\",\n  ق: \"k\",\n  ك: \"k\",\n  ل: \"l\",\n  م: \"m\",\n  ن: \"n\",\n  ه: \"h\",\n  و: \"o\",\n  ي: \"y\",\n} as const;\n\nconst LITHUANIAN_MAP = {\n  ą: \"a\",\n  č: \"c\",\n  ę: \"e\",\n  ė: \"e\",\n  į: \"i\",\n  š: \"s\",\n  ų: \"u\",\n  ū: \"u\",\n  ž: \"z\",\n  Ą: \"A\",\n  Č: \"C\",\n  Ę: \"E\",\n  Ė: \"E\",\n  Į: \"I\",\n  Š: \"S\",\n  Ų: \"U\",\n  Ū: \"U\",\n  Ž: \"Z\",\n} as const;\n\nconst SERBIAN_MAP = {\n  ђ: \"dj\",\n  ј: \"j\",\n  љ: \"lj\",\n  њ: \"nj\",\n  ћ: \"c\",\n  џ: \"dz\",\n  đ: \"dj\",\n  Ђ: \"Dj\",\n  Ј: \"j\",\n  Љ: \"Lj\",\n  Њ: \"Nj\",\n  Ћ: \"C\",\n  Џ: \"Dz\",\n  Đ: \"Dj\",\n} as const;\n\nconst AZERBAIJANI_MAP = {\n  ç: \"c\",\n  ə: \"e\",\n  ğ: \"g\",\n  ı: \"i\",\n  ö: \"o\",\n  ş: \"s\",\n  ü: \"u\",\n  Ç: \"C\",\n  Ə: \"E\",\n  Ğ: \"G\",\n  İ: \"I\",\n  Ö: \"O\",\n  Ş: \"S\",\n  Ü: \"U\",\n} as const;\n\nconst GEORGIAN_MAP = {\n  ა: \"a\",\n  ბ: \"b\",\n  გ: \"g\",\n  დ: \"d\",\n  ე: \"e\",\n  ვ: \"v\",\n  ზ: \"z\",\n  თ: \"t\",\n  ი: \"i\",\n  კ: \"k\",\n  ლ: \"l\",\n  მ: \"m\",\n  ნ: \"n\",\n  ო: \"o\",\n  პ: \"p\",\n  ჟ: \"j\",\n  რ: \"r\",\n  ს: \"s\",\n  ტ: \"t\",\n  უ: \"u\",\n  ფ: \"f\",\n  ქ: \"q\",\n  ღ: \"g\",\n  ყ: \"y\",\n  შ: \"sh\",\n  ჩ: \"ch\",\n  ც: \"c\",\n  ძ: \"dz\",\n  წ: \"w\",\n  ჭ: \"ch\",\n  ხ: \"x\",\n  ჯ: \"j\",\n  ჰ: \"h\",\n} as const;\n\nconst DECODER_MAP = {\n  ...LATIN_MAP,\n  ...LATIN_SYMBOLS_MAP,\n  ...GREEK_MAP,\n  ...TURKISH_MAP,\n  ...ROMANIAN_MAP,\n  ...RUSSIAN_MAP,\n  ...UKRAINIAN_MAP,\n  ...CZECH_MAP,\n  ...SLOVAK_MAP,\n  ...POLISH_MAP,\n  ...LATVIAN_MAP,\n  ...ARABIC_MAP,\n  ...LITHUANIAN_MAP,\n  ...SERBIAN_MAP,\n  ...AZERBAIJANI_MAP,\n  ...GEORGIAN_MAP,\n} as const;\n\nconst REGEX = new RegExp(Object.keys(DECODER_MAP).join(\"|\"), \"g\");\n\nfunction isValidKey(x: string): x is keyof typeof DECODER_MAP {\n  return x in DECODER_MAP;\n}\n\nfunction downcode(slug: string): string {\n  return slug.replace(REGEX, (m) => (isValidKey(m) ? DECODER_MAP[m] : m));\n}\n","/**\n * Inverse of processedSafeKey function\n * @param safeKey\n * @see processedSafeKey\n */\nexport function safeKeyToOriginal(safeKey: string): string {\n  return safeKey.replace(RE, (_match, code) => {\n    return String.fromCharCode(Number.parseInt(code, 16));\n  });\n}\n\n/**\n * For each character in the string that is not one of the safe characters [a-zA-Z0-9],\n * it will replace them with `-HEX_UNICODE_CODE_PADDED_6` (e.g. ' ' => '-000020')\n *\n * @param original\n */\nexport function processedSafeKey(original: string): string {\n  return original.split(\"\").map(processedSafeChar).join(\"\");\n}\n\nconst PROCESSED_SAFE_CHARS = /[A-Za-z0-9]/;\n\nfunction processedSafeChar(char: string): string {\n  if (PROCESSED_SAFE_CHARS.test(char)) {\n    return char;\n  }\n\n  const code = char.charCodeAt(0);\n  return `-${code.toString(16).toUpperCase().padStart(6, \"0\")}`;\n}\n\nconst RE = /-([0-9A-F]{6})/g;\n","import { trim } from \"es-toolkit\";\nimport { parameterize } from \"./parameterize\";\n\n/**\n * @internal\n * @ignore\n */\nconst EMPTY = \"\";\n\n/**\n * @internal\n * @ignore\n */\nconst MANY_DASHES = /[-]+/g;\n\n/**\n * @internal\n * @ignore\n */\nconst DASH = \"-\";\n\n/**\n * regex to be used for detecting invalid chars for `cleanKeySimple`\n *\n * @see cleanKeySimple()\n */\nexport const INVALID_CHARS = /[^0-9a-z\\-_]/g;\n\n/**\n * regex to be used for detecting invalid chars for `cleanKeySimpleCI`\n *\n * @see cleanKeySimpleCI()\n */\nexport const INVALID_CHARS_CI = /[^0-9A-Za-z\\-_]/g;\n\n/**\n * regex to be used for detecting invalid chars for `cleanKeySimpleWithDots`\n *\n * @see cleanKeySimpleWithDots()\n */\nexport const INVALID_CHARS_WITH_DOTS = /[^0-9a-z\\-_\\.]/g;\n\n/**\n * regex to be used for detecting invalid chars for `cleanKeySimpleCIWithDots`\n *\n * @see cleanKeySimpleCIWithDots()\n */\nexport const INVALID_CHARS_CI_WITH_DOTS = /[^0-9A-Za-z\\-_\\.]/g;\n\n/**\n * regex to be used for detecting invalid chars for `cleanKeySimpleWithSpecials`\n *\n * @see cleanKeySimpleWithSpecials()\n */\nexport const INVALID_CHARS_WITH_SPECIALS = /[^0-9a-z\\-_\\.\\/:~\\|#]/g;\n\n/**\n * regex to be used for detecting invalid chars for `cleanKeySimpleCIWithSpecials`\n *\n * @see cleanKeySimpleCIWithSpecials()\n */\nexport const INVALID_CHARS_CI_WITH_SPECIALS = /[^0-9A-Za-z\\-_\\.\\/~:\\|#]/g;\n\n/**\n * Removes bad chars for a string key (all except number, lowercase ascii7 letters, dash `-` and underscore `_`)\n *\n * @param s\n */\nexport function cleanKeySimple(s: string): string {\n  return s.replace(INVALID_CHARS, EMPTY);\n}\n\n/**\n * Removes bad chars for a string key (all except number, uppercase and lowercase ascii7 letters, dash `-` and underscore `_`)\n *\n * @param s\n */\nexport function cleanKeySimpleCI(s: string): string {\n  return s.replace(INVALID_CHARS_CI, EMPTY);\n}\n\n/**\n * Removes bad chars for a string key (all except number, lowercase ascii7 letters, dash `-` and underscore `_` and dot `.`)\n *\n * @param s\n */\nexport function cleanKeySimpleWithDots(s: string): string {\n  return s.replace(INVALID_CHARS_WITH_DOTS, EMPTY);\n}\n\n/**\n * Removes bad chars for a string key (all except number, uppercase and lowercase ascii7 letters, dash `-`, underscore `_`, and dot `.`)\n *\n * @param s\n */\nexport function cleanKeySimpleCIWithDots(s: string): string {\n  return s.replace(INVALID_CHARS_CI_WITH_DOTS, EMPTY);\n}\n\n/**\n * Removes bad chars for a string key (all except number, lowercase ascii7 letters, dash `-`, underscore `_`, dot `.`, pipes `|`, colons `:`, tildes `~`, hashtags `#`, and slashes `/`)\n *\n * @param s\n */\nexport function cleanKeySimpleWithSpecials(s: string): string {\n  return s.replace(INVALID_CHARS_WITH_SPECIALS, EMPTY);\n}\n\n/**\n * Removes bad chars for a string key (all except number, uppercase and lowercase ascii7 letters, dash `-`, underscore `_`, dot `.`, pipes `|`, colons `:`, tildes `~`, hashtags `#`, and slashes `/`)\n *\n * @param s\n */\nexport function cleanKeySimpleCIWithSpecials(s: string): string {\n  return s.replace(INVALID_CHARS_CI_WITH_SPECIALS, EMPTY);\n}\n\n/**\n * signals which characters to allow, not taking into account case sensitivity:\n * - `strict` => `0-9`, `a-z`, `-`, and `_`\n * - `dots` => strict + `.`\n * - `specials` => strict + `.`, `|`, `~`, `/`, and `:`\n */\nexport enum CharAllowanceMode {\n  Strict = \"strict\",\n  Dots = \"dots\",\n  Specials = \"specials\",\n}\n\n/**\n * type with the string values of `CharAllowanceMode`\n * @see CharAllowanceMode\n */\nexport type CharAllowanceModeEnumValues = \"strict\" | \"dots\" | \"specials\";\n\nexport type CleanKeyOptions = {\n  prependIfNoLetters?: string;\n  trimEdgeDashes?: boolean;\n  replaceManyDashes?: boolean;\n  caseSensitive?: boolean;\n  mode?: CharAllowanceModeEnumValues;\n};\n\n/**\n * same as `cleanKey` with the `caseSensitive` option to `true`\n *\n * @param s\n * @param opts\n * @see cleanKey\n */\nexport function cleanKeyCI(s: string, opts: Omit<CleanKeyOptions, \"caseSensitive\"> = {}): string {\n  return run(s, { ...opts, caseSensitive: false });\n}\n\n/**\n * same as `cleanKey` with the `mode` option to `dots`\n *\n * @param s\n * @param opts\n * @param opts.replaceManyDashes (default `true`)\n * @param opts.caseSensitive (default `true`)\n * @see cleanKey\n */\nexport function cleanKeyWithDots(s: string, opts: Omit<CleanKeyOptions, \"mode\"> = {}): string {\n  return run(s, { ...opts, mode: CharAllowanceMode.Dots });\n}\n\n/**\n * same as `cleanKey` with the `mode` option to `dots`, and `caseSensitive` to `true`\n *\n * @param s\n * @param opts\n * @param opts.replaceManyDashes (default `true`)\n * @see cleanKey\n */\nexport function cleanKeyCIWithDots(s: string, opts: Omit<CleanKeyOptions, \"caseSensitive\" | \"mode\"> = {}): string {\n  return run(s, { ...opts, caseSensitive: false, mode: CharAllowanceMode.Dots });\n}\n\n/**\n * same as `cleanKey` with the `mode` option to `specials`\n *\n * @param s\n * @param opts\n * @param opts.replaceManyDashes (default `true`)\n * @param opts.caseSensitive (default `true`)\n * @see cleanKey\n */\nexport function cleanKeyWithSpecials(s: string, opts: Omit<CleanKeyOptions, \"mode\"> = {}): string {\n  return run(s, { ...opts, mode: CharAllowanceMode.Specials });\n}\n\n/**\n * same as `cleanKey` with the `mode` option to `specials`, and `caseSensitive` to `true`\n *\n * @param s\n * @param opts\n * @param opts.replaceManyDashes (default `true`)\n * @see cleanKey\n */\nexport function cleanKeyCIWithSpecials(s: string, opts: Omit<CleanKeyOptions, \"caseSensitive\" | \"mode\"> = {}): string {\n  return run(s, { ...opts, caseSensitive: false, mode: CharAllowanceMode.Specials });\n}\n\n/**\n * Removes bad chars for a string key (all except number, lowercase ascii7 letters, dash `-` and underscore `_`)\n * It will allow uppercase ascii7 letters if option `caseSensitive` is false\n * If the mode is:\n *  - `strict`: it will allow just the standard set (`0-9`, `a-z`, `-`, and `_`)\n *  - `dots` => strict + `.`\n *  - `specials` => strict + `.`, `|`, `~`, `/`, and `:`\n * It also removes multiple dashes in a row and replaces them for a single dash unless option `replaceManyDashes: false` is given\n * If no letters `a-z` or `A-Z` are found, and the option `prependIfNoLetters` is given, it will prepend it to the original string, and clean again.\n * If `trimEdgeDashes` is true, it will trim the edge dashes (`-`) from the beginning and end of the clean string\n *\n * @param s\n * @param opts\n * @param opts.caseSensitive (default `true`)\n * @param opts.replaceManyDashes (default `true`)\n * @param opts.trimEdgeDashes (default `false`)\n * @param opts.prependIfNoLetters (default `undefined`)\n * @param opts.mode (default `strict`)\n */\nexport function cleanKey(s: string, opts: CleanKeyOptions = {}): string {\n  return run(s, opts);\n}\n\n/**\n * @internal\n * @hidden\n */\nconst ANY_LETTERS = /[a-zA-Z]/;\n\n/**\n * @internal\n * @hidden\n */\nfunction run(s: string, opts: CleanKeyOptions = {}): string {\n  const replaceManyDashes = opts.replaceManyDashes ?? true;\n  const trimEdgeDashes = opts.trimEdgeDashes ?? false;\n  const prependIfNoLetters = opts.prependIfNoLetters ?? \"\";\n  const caseSensitive = opts.caseSensitive ?? true;\n  const mode = opts.mode ?? CharAllowanceMode.Strict;\n\n  const cleanString = performClean(s, mode, caseSensitive);\n\n  const value = replaceManyDashes ? cleanString.replace(MANY_DASHES, DASH) : cleanString;\n  const valueTrimmed = trimEdgeDashes ? trim(value, \"-\") : value;\n  if (prependIfNoLetters && !ANY_LETTERS.test(valueTrimmed)) {\n    return run(`${prependIfNoLetters}${s}`, { ...opts, prependIfNoLetters: undefined });\n  }\n  return valueTrimmed;\n}\n\n/**\n * @internal\n * @hidden\n */\nfunction performClean(s: string, mode: CharAllowanceModeEnumValues, caseSensitive: boolean): string {\n  if (mode === CharAllowanceMode.Dots) {\n    return caseSensitive ? cleanKeySimpleWithDots(s) : cleanKeySimpleCIWithDots(s);\n  }\n\n  if (mode === CharAllowanceMode.Specials) {\n    return caseSensitive ? cleanKeySimpleWithSpecials(s) : cleanKeySimpleCIWithSpecials(s);\n  }\n\n  return caseSensitive ? cleanKeySimple(s) : cleanKeySimpleCI(s);\n}\n\n/**\n * First it trims and parameterizes the original string (using the `parameterize` package), and then it cleans it using the `cleanKey` function\n *\n * @param original\n * @param opts\n * @see cleanKey\n */\nexport function parameterizeAndClean(original: string, opts: CleanKeyOptions = {}): string {\n  const key = parameterize(original.trim());\n  return cleanKey(key, opts);\n}\n"],"mappings":"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","names":["CharAllowanceMode"]}